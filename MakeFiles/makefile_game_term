# VAR := expands during assignment
# VAR = expands when referenced

# output binary
BIN := .run/game_term

# source files
SRCS :=	game.cpp \
		enemygen.cpp \
		game_app.cpp \
		network.cpp \
		render.cpp \
		terrain.cpp \
		world.cpp \
		inventory.cpp \
		physics.cpp \
		sprite.cpp \
		upng.c \
		tinfl.c \
		rgba8.cpp \

LDLIBS := -lutil -lgpm

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR := .o_game_term

# intermediate directory for generated dependency files
DEPDIR := .d_game_term

# object files, auto generated from sourcce files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))

# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C compiler
CC := gcc

# C++ compiler
CXX := g++

# linker
LD := g++

# tar
TAR := tar

# C flags
CFLAGS := 

# C++ flags
CXXFLAGS := 

# C/C++ flags
CPPFLAGS := -save-temps=obj -pthread -DGAME -DPURE_TERM -O3
# CPPFLAGS := -g -save-temps=obj -pthread -DGAME -DPURE_TERM -O3
# CPPFLAGS := -g -save-temps=obj -pthread -DGAME -DPURE_TERM -fsanitize=address

# linker flags
LDFLAGS := -save-temps=obj -pthread -O3
# LDFLAGS := -g -save-temps=obj -pthread -O3
# LDFLAGS := -g -save-temps=obj -pthread -fsanitize=address

# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C source files
COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@

# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@

# link object files to binary
LINK.o = $(LD) $(LDFLAGS) -o $@

# precompile step
PRECOMPILE =

# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: $(BIN)

dist: $(DISTFILES)
	@$(TAR) -cvzf $(DISTOUTPUT) $^
#	$(BUILD)

.PHONY: clean
clean:
	@$(RM) -r $(OBJDIR) $(DEPDIR)
#	$(BUILD)

.PHONY: distclean
distclean: clean
	@$(RM) $(BIN) $(DISTOUTPUT)
#	$(BUILD)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check:
	@echo no tests configured

.PHONY: help
help:
	@echo available targets: all dist clean distclean install uninstall check

$(BIN): $(OBJS)
	@echo Linking: $(BIN)
	@$(LINK.o) $^ $(LDLIBS)

$(OBJDIR)/%.o: %.c
$(OBJDIR)/%.o: %.c $(DEPDIR)/%.d
	@echo Comiling $<
	@$(PRECOMPILE)
	@$(COMPILE.c) $<
	@$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	@echo Comiling $<
	@$(PRECOMPILE)
	@$(COMPILE.cc) $<
	@$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cc
$(OBJDIR)/%.o: %.cc $(DEPDIR)/%.d
	@echo Comiling $<
	@$(PRECOMPILE)
	@$(COMPILE.cc) $<
	@$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cxx
$(OBJDIR)/%.o: %.cxx $(DEPDIR)/%.d
	@echo Comiling $<
	@$(PRECOMPILE)
	@$(COMPILE.cc) $<
	@$(POSTCOMPILE)

.PRECIOUS = $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)